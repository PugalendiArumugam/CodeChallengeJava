package LeetCode.Medium;

import java.util.*;
import java.util.stream.Collectors;

public class SortCharacterByFreq {
    public static void main(String[] args) {
        SortCharacterByFreq scbf = new SortCharacterByFreq();
        System.out.println(scbf.frequencySort4("tree"));
//        System.out.println(scbf.frequencySort4("cccaaa"));
//        System.out.println(scbf.frequencySort4("Aabb"));
//        System.out.println(scbf.frequencySort4("RILmT0oZF8"));
//        System.out.println(scbf.frequencySort4("ApsY9AQF2xsz1pbHl5Po7Q1yKNOthVVY9wkGrvktI1dcbXirB5k82sK1lFrx2Wv3mc1viEfvt31TRor6HFCe4M40hztHX3pVSAoi"));
//        String yes = "";
//        String result = scbf.frequencySort(yes);
//        System.out.println(result);
    }



    public String frequencySort4(String s) {
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); ++i) {
            map.merge(s.charAt(i), 1, Integer::sum);
        }
        List<Character> allChars = new ArrayList<>(map.keySet());
        allChars.sort((a, b) -> map.get(b) - map.get(a));
        StringBuilder sb = new StringBuilder();
        for (char c : allChars) {
            for (int frequency = map.get(c); frequency > 0; --frequency) {
                sb.append(c);
            }
        }
        return sb.toString();
    }



    public String frequencySort(String s) {
        Map<Character,StringBuilder> map = new HashMap<>();
        for(int i= 0;i<s.length();i++){
            char key = s.charAt(i);
            StringBuilder temp = map.getOrDefault(key,null);
            String currValue;    // default value
            if(temp==null){
                currValue=1+"^"+key;
            } else {
                String[] tempS= temp.toString().split("\\^");
                int k =(Integer.parseInt(tempS[0]));
                currValue = ++k+"^"+key;
            }
            map.put(key,new StringBuilder(currValue));
        }
//        System.out.println("Size of s:"+s.length()+"size of array map:"+map.size());

        if(s.length() == map.size()) return s;
        StringBuilder[] sa = map.values().toArray(new StringBuilder[0]);
        quickSort(sa,0, sa.length-1);
//        Arrays.sort(sa);
        StringBuilder result = new StringBuilder();
        for(int i= sa.length-1;i>=0;i--){
            String parts[] = sa[i].toString().split("\\^");
            int numberPart =(Integer.parseInt(parts[0]));
            String keyPart = sa[i].substring(sa[i].length()-1);
            while (numberPart>0){
                result.append(keyPart);
                numberPart--;
            }
        }
        return result.toString();
    }


    private void quickSort(StringBuilder[] array, int start, int end){
        if (end <= start) return;  // base case
        int pivot = partition(array, start, end);
        quickSort(array,start, pivot -1 );
        quickSort(array, pivot+1, end);
    }

    private int partition(StringBuilder[] array, int start, int end){
        String[] parts = array[end].toString().split("\\^");
        int pivot = (Integer.parseInt(parts[0]));
        int i = start - 1;
        for (int j = start; j <= end-1; j++) {
            String[] parts2 = array[j].toString().split("\\^");
            int arrayJ= (Integer.parseInt(parts2[0]));
            if (arrayJ < pivot){
                i++;
                String sTemp = array[i].toString();
                array[i] = array[j];
                array[j] = new StringBuilder(sTemp);
            }
        }
        i++;
        String sTemp = array[i].toString();
        array[i] = array[end];
        array[end] = new StringBuilder(sTemp);
        return i ;
    }



    public String frequencySort2(String s) {
        int[] hash=new int[123];
        Arrays.fill(hash,0);
        int[] vis=new int[122];
        Arrays.fill(vis,0);
        for(int i=0;i<s.length();i++){
            hash[s.charAt(i)]++;
        }
        List<StringBuilder> l=new ArrayList<>();
        int count=0;
        for(int i=0;i<=122;i++){
            int len=hash[i];
            if(len==0){
                continue;
            }
            StringBuilder sb=new StringBuilder();
            for(int j=0;j<len;j++){
                char a=(char)i;
                sb.append(a);
            }
            l.add(sb);

        }
        List<StringBuilder> lk = l
                .stream()
                .sorted((str1, str2) -> str2.length() - str1.length())
                .collect(Collectors.toList());

        StringBuilder ans=new StringBuilder();
        int lenn=0;
        while(lenn<lk.size()){
            ans.append(lk.get(lenn));
            lenn++;

        }
        return ans.toString();
    }



}
